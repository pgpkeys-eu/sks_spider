#!/bin/bash
#
# git .git/hooks/pre-commit candidate for usage in Go repositories
#

# MacOS ships with bash3, which isn't enough.

if [[ "${BASH_VERSION}" != "" && ${BASH_VERSINFO[0]} -lt 4 ]]; then
	# have no globstar shopt; switch to zsh if available
	zshpath="$(type -p zsh)"
	if [[ "$zshpath" != "" ]]; then
		exec "$zshpath" -f "$0" "$@"
	else
		echo >&2 "$0: self setup error: unable to use zsh or recent bash"
		exit 1
	fi
fi

if [[ "${BASH_VERSION}" != "" ]]; then
	shopt -s globstar
elif [[ "${ZSH_VERSION}" != "" ]]; then
	# ** is supported by default, in versions of zsh stretching back at least a decade
	:
else
	echo >&2 "$0: Warning: unknown shell running me"
fi

gopermitnonfmt=$(git config hooks.gopermitnonfmt)
gopermitnonvet=$(git config hooks.gopermitnonvet)
gopermitnonbuild=$(git config hooks.gopermitnonbuild)
gopermitnontest=$(git config hooks.gopermitnontest)

# See <http://tech.yipit.com/2011/11/16/183772396/> about making sure that the
# tests are invoked on the code staged for commit.  Also
# <http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/>
# and "git help stash" to come up with our own options.
# If we have PRE_COMMIT_DIRTY=true in environment, then we don't do that.

repository_want_prep() {
	[[ "${PRE_COMMIT_DIRTY:-}" != "true" ]]
}

repository_set_for_checks() {
	if git status --porcelain | grep '^ M' >&2
	then
		echo >&2 "Warning: files above modified but not staged for commit"
	fi
	git stash --keep-index --all --quiet
}

repository_return_to_user() {
	git reset --hard --quiet
	git stash pop --index --quiet
}

die() {
	ev=$?
	if [[ $1 =~ '^[0-9][0-9]*$' ]]; then
		ev=$1
		shift
	fi
	if [[ $ev -eq 0 ]]; then
		ev=1
	fi
	if [[ $# -gt 0 ]]; then
		echo >&2 "Error: $*"
	fi

	repository_want_prep && repository_return_to_user
	exit $ev
}

repository_want_prep && repository_set_for_checks

gocount=$(find . -name '*.go' | wc -l)
if (( gocount < 1 )); then
	die "this repository is expected to contain .go files and does not"
fi

check_go_command() {
	local toggle_off ev
	toggle_off="$1"
	shift
	if [[ "$toggle_off" != true ]]; then
		"$@"
		ev=$?
		if [[ $ev -ne 0 ]]; then
			die "'$*' failed, rejecting commit"
		fi
	fi
}

check_go_command "$gopermitnonvet" go vet

if [[ "$gopermitnonfmt" != "true" ]]; then
	output="$(for F in **/*.go; do
		gofmt -l -e "$F"
	done)"
	if [[ "$output" != "" ]]; then
		echo >&2 "Error: some files need 'go fmt':"
		cat -v >&2 <<<"$output"
		die
	fi
fi

check_go_command "$gopermitnonbuild" go build
check_go_command "$gopermitnontest" go test

repository_want_prep && repository_return_to_user

exit 0
