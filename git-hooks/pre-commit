#!/bin/bash
#
# Copyright (c) 2012 Apcera Inc.
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

#
# git .git/hooks/pre-commit candidate for usage in Go repositories
#
# To see the git config options available, see the configuration section
# below, under the shell-finding code.
#

# ======================================================================
# Get an acceptable shell

# MacOS ships with bash3, which isn't enough.
if [[ "${BASH_VERSION}" != "" && ${BASH_VERSINFO[0]} -lt 4 ]]; then
	# have no globstar shopt; switch to zsh if available
	zshpath="$(type -p zsh)"
	if [[ "$zshpath" != "" ]]; then
		exec "$zshpath" -f "$0" "$@"
	else
		echo >&2 "$0: self setup error: unable to use zsh or recent bash"
		exit 1
	fi
fi

if [[ "${BASH_VERSION}" != "" ]]; then
	shopt -s globstar
elif [[ "${ZSH_VERSION}" != "" ]]; then
	# ** is supported by default, in versions of zsh stretching back at least a decade
	:
else
	echo >&2 "$0: Warning: unknown shell running me"
fi

# ======================================================================
# Grab configuration

# Git is case-insensitive in config names.
#
# Default these to run:
repo_disablecheck_fmt=$(git config hooks.PrecommitGoDisableFmt)
repo_disablecheck_vet=$(git config hooks.PrecommitGoDisableVet)
# Default these to not run:
repo_enablecheck_build=$(git config hooks.PrecommitGoEnableBuild)
repo_build_target=($(git config --get-all hooks.PrecommitGoBuildExtraTarget))
repo_enablecheck_test=$(git config hooks.PrecommitGoEnableTest)
#
# To change, use:
#  git config --bool hooks.PrecommitGoEnableBuild true
#  git config --replace-all hooks.PrecommitGoBuildExtraTarget "cmd1.go cmd2.go"
#
# For the extra target, you can either specify multiple parameters split by
# whitespace, or use multiple parameters (so --add instead of --replace-all).
# Either works, both work together.  This script assumes that filenames in
# the repo can be safely split on whitespace.
#

# ======================================================================
# Utilities

# See <http://tech.yipit.com/2011/11/16/183772396/> about making sure that the
# tests are invoked on the code staged for commit.  Also
# <http://codeinthehole.com/writing/tips-for-using-a-git-pre-commit-hook/>
# and "git help stash" to come up with our own options.
# If we have PRE_COMMIT_DIRTY=true in environment, then we don't do that.

repo_stash_done=false

repository_want_prep() {
	[[ "${PRE_COMMIT_DIRTY:-}" != "true" ]]
}

repository_set_for_checks() {
	if git status --porcelain | grep '^ M' >&2
	then
		echo >&2 "Warning: files above modified but not staged for commit"
	fi
	git stash --keep-index --all --quiet
	repo_stash_done=true
}

repository_return_to_user() {
	if $repo_stash_done; then
		git reset --hard --quiet
		git stash pop --index --quiet
		repo_stash_done=false
	fi
}

die() {
	ev=$?
	if [[ $1 =~ '^[0-9][0-9]*$' ]]; then
		ev=$1
		shift
	fi
	if [[ $ev -eq 0 ]]; then
		ev=1
	fi
	if [[ $# -gt 0 ]]; then
		echo >&2 "Error: $*"
	fi

	repository_want_prep && repository_return_to_user
	# For bash4, could { trap - EXIT } here, but zsh localises EXIT to
	# be for the function, can't affect the global EXIT trap.  So instead
	# we don't complain in repository_return_to_user() if already popped.
	exit $ev
}

die_if_command_failed() {
	local ev=$?
	if [[ $ev -eq 0 ]]; then
		return
	fi
	die "'$*' failed, rejecting commit"
}

run_and_die_on_failure() {
	"$@"
	die_if_command_failed "$@"
}

# ======================================================================
# Start work.

if repository_want_prep
then
	trap 'repository_return_to_user' EXIT SIGINT SIGTERM
	repository_set_for_checks
fi

gocount=$(find . -name '*.go' | wc -l)
if (( gocount < 1 )); then
	die "this repository is expected to contain .go files and does not"
fi

check_go_command() {
	local toggle direction ev proceed
	toggle="$1"
	shift
	direction="$1"
	shift
	case $direction in
		enable)
			proceed=false
			if [[ "$toggle" == "true" ]]; then
				proceed=true
			fi
			;;
		disable)
			proceed=true
			if [[ "$toggle" == "true" ]]; then
				proceed=false
			fi
			;;
		*)
			die "Internal error, check_go_command($toggle, >>>$direction<<<)"
			;;
	esac

	if $proceed
	then
		run_and_die_on_failure "$@"
	fi
}

check_go_command "$repo_disablecheck_vet" "disable" go vet

if [[ "$repo_disablecheck_fmt" != "true" ]]; then
	output="$(for F in **/*.go; do
		gofmt -l -e "$F"
	done)"
	if [[ "$output" != "" ]]; then
		echo >&2 "Error: some files need 'go fmt':"
		cat -v >&2 <<<"$output"
		die
	fi
fi

check_go_command "$repo_enablecheck_build" "enable" go build
if [[ ${#repo_build_target} -gt 0 && "$repo_enablecheck_build" == true ]]; then
	for target in "${repo_build_target[@]}"; do
		run_and_die_on_failure go build -o /dev/null "$target"
	done
fi

check_go_command "$repo_enablecheck_test" "enable" go test

repository_want_prep && repository_return_to_user
trap - EXIT

exit 0
